<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代碼精進之路-筆記</title>
      <link href="/2019/04/02/%E4%BB%A3%E7%A2%BC%E7%B2%BE%E9%80%B2%E4%B9%8B%E8%B7%AF/"/>
      <url>/2019/04/02/%E4%BB%A3%E7%A2%BC%E7%B2%BE%E9%80%B2%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>閱讀極客時間-代碼精進之路，將一些重點項目記錄如下</p><h4 id="不要過份認為自己的代碼不會犯錯，就連apple專案師都會犯下低級錯誤"><a href="#不要過份認為自己的代碼不會犯錯，就連apple專案師都會犯下低級錯誤" class="headerlink" title="不要過份認為自己的代碼不會犯錯，就連apple專案師都會犯下低級錯誤"></a>不要過份認為自己的代碼不會犯錯，就連apple專案師都會犯下低級錯誤</h4><p>以下是apple 著名的<font color="red"> RedGoToFail </font>漏洞</p><pre><code>    if ((error = doSomething()) != 0)        goto fail;        goto fail;    if ((error= doMore()) != 0)        goto fail;fail:    return error;</code></pre><h2 id="什麼是好的代碼"><a href="#什麼是好的代碼" class="headerlink" title="什麼是好的代碼"></a>什麼是好的代碼</h2><p>“好” 的代碼<br></p><p>容易理解<br><br>有明顯的安全問題<br><br>能夠滿足最關鍵的需求<br><br>有充分的註釋<br><br>使用規範的命名<br><br>經過充分的測試<br></p><p><font color="green"> 最適合當前現實環境的代碼，才是最優秀的代碼 </font><br></p><p>“壞” 的代碼<br><br>難以閱讀的代碼<br><br>浪費大量計算機資源的代碼<br><br>代碼風格混亂的代碼<br><br>複雜的、不直觀的代碼<br><br>有經過適當測試的代碼<br></p><h3 id="盡量不要使用條件運算符，而使用條件語句"><a href="#盡量不要使用條件運算符，而使用條件語句" class="headerlink" title="盡量不要使用條件運算符，而使用條件語句"></a>盡量不要使用條件運算符，而使用條件語句</h3><p>條件語句 <font color="green"> ○ </font></p><pre><code>if (variable != null) {   return variable.getSomething();}return null;</code></pre><p>條件運算符 <font color="red"> X </font></p><pre><code>return variable != null ? variable.getSomething() : null;</code></pre><hr><h3 id="代碼檢查的五道關卡"><a href="#代碼檢查的五道關卡" class="headerlink" title="代碼檢查的五道關卡"></a>代碼檢查的五道關卡</h3><h4 id="第一道關：程式員-好的代碼風格"><a href="#第一道關：程式員-好的代碼風格" class="headerlink" title="第一道關：程式員 (好的代碼風格) "></a>第一道關：程式員 (好的代碼風格) <br></h4><p>代碼縮進 </p><pre><code>    if ((error = doSomething()) != 0)        goto fail;    goto fail;    if ((error= doMore()) != 0)        goto fail;fail:    return error;</code></pre><p>使用大括號 </p><pre><code>    if ((error = doSomething()) != 0) {        goto fail;        goto fail;    }    if ((error= doMore()) != 0) {        goto fail;    }fail:    return error;</code></pre><h4 id="第二道关：编译器"><a href="#第二道关：编译器" class="headerlink" title="第二道关：编译器"></a>第二道关：编译器</h4><p>至今，GCC 社区对于无法访问代码的检查，还没有统一的意见 。然而，GCC 社区并没有完全浪费这个“GoTo Fail”的问题 。为解决类似问题，从 GCC 6 开始，GCC 社区为正确使用缩进提供了一个警告选项（ -Wmisleading-indentation ）。如果代码缩进格式没有正确使用，GCC 就会提供编译时警告。现在，如果我们启用并且注意到了 GCC 编译器的警告，犯类似错误的机会应该会大幅度地降低了。</p><h4 id="第三道关：回归测试-（Regression-Testing）"><a href="#第三道关：回归测试-（Regression-Testing）" class="headerlink" title="第三道关：回归测试 （Regression Testing）"></a>第三道关：回归测试 （Regression Testing）</h4><p>软件测试会尽可能地覆盖 关键逻辑和负面清单 ，以确保关键功能能够正确执行，关键错误能够有效处理。一般情况下，无论是开发人员，还是测试人员，都要写很多测试代码，来测试软件是否达到预期的要求。</p><h4 id="第四道关：代码评审-（Code-Review）"><a href="#第四道关：代码评审-（Code-Review）" class="headerlink" title="第四道关：代码评审 （Code Review）"></a>第四道关：代码评审 （Code Review）</h4><p>代码评审是一个有效的在软件研发过程中抵御人类缺陷的制度 。通过更多的眼睛检查软件代码，被忽视的错误更容易被逮住，更好的设计和实现更容易浮现出来。</p><h4 id="第五道关：代码分析-（Code-Analysis）"><a href="#第五道关：代码分析-（Code-Analysis）" class="headerlink" title="第五道关：代码分析 （Code Analysis）"></a>第五道关：代码分析 （Code Analysis）</h4><p>静态代码分析（Static Code Analysis）是通过对源代码的检查来发现潜在问题的一种软件质量保障方式。有很多静态代码分析工具可以帮助你检查代码缺陷，比如说商业软件 Coverity，以及开源软件 FindBugs。</p><hr><h3 id="代码规范的价值"><a href="#代码规范的价值" class="headerlink" title="代码规范的价值"></a>代码规范的价值</h3><p>规范的代码，可以降低代码出错的几率<br><br><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener"> 阿里巴巴 Java 开发手册 </a></p><p>05 | 经验总结：如何给你的代码起好名字？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 代碼精進之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android MVVM (1) 簡介</title>
      <link href="/2019/04/02/Android%20MVVM%20(1)%20%E7%B0%A1%E4%BB%8B/"/>
      <url>/2019/04/02/Android%20MVVM%20(1)%20%E7%B0%A1%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>參考資料<br><br><a href="https://tech.meituan.com/2016/11/11/android-mvvm.html" target="_blank" rel="noopener">https://tech.meituan.com/2016/11/11/android-mvvm.html</a></p><h2 id="1-MVC、MVP、MVVM-架构模式-簡介"><a href="#1-MVC、MVP、MVVM-架构模式-簡介" class="headerlink" title="1.MVC、MVP、MVVM 架构模式 簡介"></a>1.MVC、MVP、MVVM 架构模式 簡介</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul><li>View：xml布局文件</li><li>Model：实体模型（数据的获取、存储、数据状态变化）</li><li>Controllor：Activity业务逻辑，数据处理和UI处理</li></ul><p>由於代表View的XML视图功能太弱，導致大量处理View的逻辑只能写在Activity中，这样Activity就充当了View和Controller两个角色。这个MVC结构最终其实只是一个Model-View（Activity:View&amp;Controller）的结构</p><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><ul><li>View: Activity和XML，负责View的绘制以及与用户的交互 </li><li>Model: 实体模型（数据的获取、存储、数据状态变化）</li><li>Presenter: 负责完成View与Model间的交互和业务逻辑</li></ul><p>通过一个抽象的View接口（不是真正的View层）将Presenter与真正的View层进行解耦。Persenter持有该View接口，对该接口进行操作，而不是直接操作View层。这样就可以把视图操作和业务逻辑解耦，从而让Activity成为真正的View层。</p><p>弊端：<br><br>1.P层与V层是通过接口进行交互的，会存在大量接口代碼<br><br>2.以UI为驱动的模型，使用需考虑控件的引用、UI线程與Activity的生命周期<br><br>3.UI若改變，牵扯的更新UI的接口就必须得换<br><br>4.复杂的业务同时也可能会导致P层太大，代码臃肿的问题依然不能解决</p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><ul><li>Model: 实体模型（数据的获取、存储、数据状态变化）</li><li>View: 对应于Activity和xml，负责View的绘制以及与用户交互</li><li>ViewModel(VM): 负责完成View于Model间的交互,负责业务逻辑</li></ul><p>利用数据绑定(Data Binding)、依赖属性(Dependency Property)、命令(Command)、路由事件(Routed Event)達成以下特性</p><h4 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动<br></h4><p>在MVVM中，数据变化后会自动更新UI，UI的改变也能自动反馈到数据层，数据成为主导因素。这样MVVM层在业务逻辑处理中只要关心数据，不需要直接和UI打交道，在业务处理过程中简单方便很多。</p><h4 id="低耦合度、可复用性、團隊協作容易"><a href="#低耦合度、可复用性、團隊協作容易" class="headerlink" title="低耦合度、可复用性、團隊協作容易"></a>低耦合度、可复用性、團隊協作容易<br></h4><p>数据和业务逻辑处于一个独立的ViewModel中，ViewModel只需要关注数据和业务逻辑，不需要和UI或者控件打交道。UI想怎么处理数据都由UI自己决定，ViewModel不涉及任何和UI相关的事，也不持有UI控件的引用。即便是控件改变了（比如：TextView换成EditText），ViewModel也几乎不需要更改任何代码，完美解了View层和ViewModel。</p><h2 id="2-构建MVVM应用程序"><a href="#2-构建MVVM应用程序" class="headerlink" title="2.构建MVVM应用程序"></a>2.构建MVVM应用程序</h2><p>各層分工如下</p><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>只做UI相关工作，在XML、Activity和Fragment写View层的代码，更新UI是通过数据绑定实现，尽量在VM里面做（更新绑定的数据源即可），Activity要做的事就是初始化一些控件（如控件的颜色，添加RecyclerView的分割线），V层可以处理事件（但是我们更希望UI事件通过Command来绑定）。简单地说：V层不做任何业务逻辑、不涉及操作数据、不处理数据，UI和数据严格的分开。</p><h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p>VM只做和业务逻辑和业务数据相关的事，不会持有任何控件的引用，更不会在VM中通过UI控件的引用去做更新UI的事情。VM就是专注于业务的逻辑处理，做的事情也都只是对数据的操作（这些数据绑定在相应的控件上会自动去更改UI）。同时DataBinding框架已经支持双向绑定，让我们可以通过双向绑定获取V层反馈给VM层的数据，并对这些数据上进行操作。关于对UI控件事件的处理，我们通过BindingAdapter对一些常用的事件封装成一个个Command，对于每个事件我们用一个ReplyCommand去处理，ReplyCommand会把你可能需要的数据带给你，这使得我们在VM层处理事件的时候只需要关心处理数据就行了</p><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>M层的任务是数据的获取、存储、状态变化。M層包括实体模型（Bean）、Retrofit的Service ，获取网络数据接口，本地存储（增删改查）接口，数据变化监听等。Model提供数据获取接口供VM调用，经数据转换和操作并最终映射绑定到V层某个UI元素的属性上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
